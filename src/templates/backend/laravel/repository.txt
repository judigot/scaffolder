<?php
{{ownerComment}}
namespace App\Repositories;

use App\Models\{{modelName}};

class {{className}}Repository implements {{className}}RepositoryInterface
{
    public function getAll()
    {
        return {{modelName}}::all();
    }

    public function findById(int $id): ?{{modelName}}
    {
        return {{modelName}}::find($id);
    }

    public function create(array $data): {{modelName}}
    {
        return {{modelName}}::create($data);
    }

    public function update(int $id, array $data): bool
    {
        ${{tableName}} = {{modelName}}::find($id);
        if (${{tableName}}) {
            return ${{tableName}}->update($data);
        }
        return false;
    }

    public function delete(int $id): bool
    {
        ${{tableName}} = {{modelName}}::find($id);
        if (${{tableName}}) {
            return ${{tableName}}->delete();
        }
        return false;
    }

    public function findByAttributes(array $attributes): ?{{modelName}}
    {
        return {{modelName}}::where($attributes)->first();
    }

    public function paginate(int $perPage = 15)
    {
        return {{modelName}}::paginate($perPage);
    }

    public function search(string $query, array $fields, int $perPage = 15)
    {
        return {{modelName}}::where(function($q) use ($query, $fields) {
            foreach ($fields as $field) {
                $q->orWhere($field, 'LIKE', "%{$query}%");
            }
        })->paginate($perPage);
    }

    public function count(array $criteria = []): int
    {
        return {{modelName}}::where($criteria)->count();
    }

    public function getWithRelations(array $relations)
    {
        return {{modelName}}::with($relations)->get();
    }

    public function findOrFail(int $id): {{modelName}}
    {
        return {{modelName}}::findOrFail($id);
    }

    public function updateOrCreate(array $attributes, array $values = []): {{modelName}}
    {
        return {{modelName}}::updateOrCreate($attributes, $values);
    }

    public function softDelete(int $id): bool
    {
        ${{tableName}} = {{modelName}}::find($id);
        if (${{tableName}}) {
            return ${{tableName}}->delete();
        }
        return false;
    }

    public function restore(int $id): bool
    {
        ${{tableName}} = {{modelName}}::withTrashed()->find($id);
        if (${{tableName}}) {
            return ${{tableName}}->restore();
        }
        return false;
    }

    public function batchUpdate(array $criteria, array $data): bool
    {
        return {{modelName}}::where($criteria)->update($data);
    }

    public function exists(array $criteria): bool
    {
        return {{modelName}}::where($criteria)->exists();
    }

    public function getPostCount(User $user): int
    {
        return $user->posts()->count();
    }

    public function getAllUsersWithPostCount()
    {
        return User::withCount('posts')->get();
    }

    public function findBySlug(string $slug): ?{{modelName}}
    {
        return {{modelName}}::where('slug', $slug)->first();
    }

    public function pluck(string $column, string $key = null): \Illuminate\Support\Collection
    {
        return {{modelName}}::pluck($column, $key);
    }

    public function firstOrCreate(array $attributes, array $values = []): {{modelName}}
    {
        return {{modelName}}::firstOrCreate($attributes, $values);
    }

    public function firstOrNew(array $attributes, array $values = []): {{modelName}}
    {
        return {{modelName}}::firstOrNew($attributes, $values);
    }

    public function chunk(int $size, callable $callback): bool
    {
        return {{modelName}}::chunk($size, $callback);
    }

    public function each(callable $callback): bool
    {
        return {{modelName}}::each($callback);
    }

    public function random(int $count = 1): \Illuminate\Support\Collection
    {
        return {{modelName}}::inRandomOrder()->limit($count)->get();
    }

    public function latest(string $column = 'created_at'): ?{{modelName}}
    {
        return {{modelName}}::latest($column)->first();
    }

    public function oldest(string $column = 'created_at'): ?{{modelName}}
    {
        return {{modelName}}::oldest($column)->first();
    }

    public function findMany(array $ids): \Illuminate\Support\Collection
    {
        return {{modelName}}::findMany($ids);
    }

    public function whereIn(string $column, array $values): \Illuminate\Support\Collection
    {
        return {{modelName}}::whereIn($column, $values)->get();
    }

    public function whereNotIn(string $column, array $values): \Illuminate\Support\Collection
    {
        return {{modelName}}::whereNotIn($column, $values)->get();
    }

    public function whereBetween(string $column, array $range): \Illuminate\Support\Collection
    {
        return {{modelName}}::whereBetween($column, $range)->get();
    }

    public function withTrashed(): \Illuminate\Support\Collection
    {
        return {{modelName}}::withTrashed()->get();
    }

    public function onlyTrashed(): \Illuminate\Support\Collection
    {
        return {{modelName}}::onlyTrashed()->get();
    }

    public function withoutTrashed(): \Illuminate\Support\Collection
    {
        return {{modelName}}::withoutTrashed()->get();
    }

    public function orderBy(string $column, string $direction = 'asc'): \Illuminate\Support\Collection
    {
        return {{modelName}}::orderBy($column, $direction)->get();
    }

    public function groupBy(string $column): \Illuminate\Support\Collection
    {
        return {{modelName}}::groupBy($column)->get();
    }
}
